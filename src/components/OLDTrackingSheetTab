import React, { useState, useEffect } from 'react';
import { useDataContext } from './DataContext';
import './TrackingSheetTab.css'; // Import the CSS file

const TrackingSheetTab = () => {
  // Fetch necessary data from DataContext
  const { studentSchedule, setStudentSchedule, courseCatalog } = useDataContext();

  const [degreeRequirements] = useState([
    { name: 'Humanities', numCourses: 6, departments: ['Humanities'] },
    { name: 'Mathematics', numCourses: 7, departments: ['Mathematics'] },
    { name: 'Basic Science', numCourses: 5, departments: ['Physics', 'Chemistry', 'Biology'] },
    { name: 'Computer Science', numCourses: 18, departments: ['Computer Science'] },
    { name: 'Social Science', numCourses: 2, departments: ['Environment', 'Sociology', 'Economics'] },
  ]);

  // Function to get full course name from courseCatalog
const getCourseFullName = (courseId) => {
    const course = courseCatalog.find((course) => course.id === courseId);
    return course ? course.fullName : '';
  };
  // Function to group courses by requirement
  const groupCoursesByRequirement = () => {
    const coursesByRequirement = {};

    degreeRequirements.forEach(({ name, numCourses }) => {
      coursesByRequirement[name] = Array(numCourses).fill(null);
    });

    studentSchedule.forEach(({ courseId }) => {
      const course = courseCatalog.find((course) => course.id === courseId);
      if (!course) return; // Ignore invalid courses

      // Find the requirement that the course fulfills
      const requirement = degreeRequirements.find((req) => req.departments.includes(course.department));

      if (requirement) {
        if (!coursesByRequirement[requirement.name]) {
          coursesByRequirement[requirement.name] = [];
        }
        const emptySpotIndex = coursesByRequirement[requirement.name].findIndex((spot) => spot === null);
        if (emptySpotIndex !== -1) {
          coursesByRequirement[requirement.name][emptySpotIndex] = course; // Fill empty spot with course object
        }
      }
    });
    return coursesByRequirement;
  };

  // State for courses grouped by requirement
  const [coursesByRequirement, setCoursesByRequirement] = useState({});

  useEffect(() => {
    const groupedCourses = groupCoursesByRequirement();
    setCoursesByRequirement(groupedCourses);
  }, [studentSchedule, courseCatalog, degreeRequirements]);

  // Function to filter courses by department based on clicked course
    const filterCoursesByDepartment = (clickedCourse) => {
    // Get unique course IDs from studentSchedule
    const scheduledCourseIds = new Set(studentSchedule.map(scheduleItem => scheduleItem.courseId));
    
    // Get the departments that fulfill the same requirement as the clicked course
    const relevantDepartments = degreeRequirements
        .filter(requirement => requirement.departments.includes(clickedCourse.department))
        .flatMap(requirement => requirement.departments);

    // Filter course catalog to exclude courses already in studentSchedule and include courses from relevant departments
    return courseCatalog.filter((course) => {
        return relevantDepartments.includes(course.department) && !scheduledCourseIds.has(course.id);
    });
};



  // State for managing the filtered courses
  const [filteredCourses, setFilteredCourses] = useState([]);

  // State to store the clicked course in the requirement table
const [clickedCourse, setClickedCourse] = useState(null);

useEffect(() => {
    if (clickedCourse) {
        const courses = filterCoursesByDepartment(clickedCourse);
        setFilteredCourses(courses);
    }
}, [clickedCourse, courseCatalog, studentSchedule]);


// Handle click on a course in the requirement table
const handleCourseClick = (course) => {
    setClickedCourse(course);
    const filteredCourses = filterCoursesByDepartment(course);
    setFilteredCourses(filteredCourses);
};

// Handle click on a course in the course catalog to replace the selected course in the requirement table
const handleCatalogCourseClick = (newCourse) => {
  if (clickedCourse) {
    replaceCourse(clickedCourse, newCourse);
    setClickedCourse(null); // Reset clicked course after handling click
  }
};

  // Replace the selected course in the requirement table with the clicked course from the catalog
  const replaceCourse = (oldCourse, newCourse) => {  
    const updatedStudentSchedule = studentSchedule.map((scheduleItem) =>{
        if (scheduleItem.courseId == oldCourse.id) 
            {scheduleItem.courseId = newCourse.id}
      }
    );

    const updatedCoursesByRequirement = { ...coursesByRequirement };
    Object.keys(updatedCoursesByRequirement).forEach((requirement) => {
      updatedCoursesByRequirement[requirement] = updatedCoursesByRequirement[requirement].map((course) =>
        course === oldCourse ? newCourse : course
      );
    });
    setCoursesByRequirement(updatedCoursesByRequirement);
  };
  

 // Render JSX based on coursesByRequirement
const renderTables = () => {
    const allRequirements = Object.keys(coursesByRequirement);
    const numColumns = 3;
    const numRows = Math.ceil(allRequirements.length / numColumns);
    const tables = [];
  
    const requirementsPerColumn = Math.ceil(allRequirements.length / numColumns);
  
    for (let i = 0; i < numColumns; i++) {
      const columnTables = [];
      const start = i * requirementsPerColumn;
      const end = Math.min(start + requirementsPerColumn, allRequirements.length);
  
      for (let j = start; j < end; j++) {
        const requirement = allRequirements[j];
        columnTables.push(
          <div key={requirement} className="requirement-table">
            <h3>{requirement}</h3>
            <table>
              <tbody>
                {coursesByRequirement[requirement]?.map((course, index) => (
                  <tr key={`${requirement}-${index}`}>
                    <td className="course-cell" onClick={() => handleCourseClick(course)}>
                      {course ? `${course.id}` : ''}
                      {course && (
                        <div className="tooltip">{getCourseFullName(course.id)}</div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      }
  
      tables.push(
        <div key={i} style={{ flex: 1 }}>
          {columnTables}
        </div>
      );
    }
  
    return <div style={{ display: 'flex' }}>{tables}</div>;
  };
  
  
  

  
  // Render the filtered courses in the course catalog
  const renderFilteredCourses = () => {
    return filteredCourses.map((course) => (
      <li key={course.id} onClick={() => handleCatalogCourseClick(course)}>
        {`${course.id}: ${course.fullName}`}
      </li>
    ));
  };

  return (
    <div className="tracking-sheet">
      <div className="course-catalog">
        <h2>Course Catalog</h2>
        <ul>{renderFilteredCourses()}</ul>
      </div>
      <div className="requirements">{renderTables()}</div>
    </div>
  );
};

export default TrackingSheetTab;
